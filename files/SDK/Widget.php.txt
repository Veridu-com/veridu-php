<?php
/**
* Widget endpoint handling
*/

namespace Veridu\SDK;

use Veridu\Common\Config;
use Veridu\Common\Compat;
use Veridu\Common\URL;

class Widget {
	/**
	* @var Config Config instance
	*/
	private $config;
	/**
	* @var string Session token
	*/
	private $session;
	/**
	* @var string Username identification
	*/
	private $username;

	/**
	* Base widget URL
	*/
	const BASE_URL = 'https://widget.veridu.com';

	/**
	* Class constructor
	*
	* @param Config $config Config object with basic client configuration
	* @param string $session Session token
	* @param string $username Username identification
	*
	* @return void
	*/
	public function __construct(Config &$config, $session, $username) {
		$this->config = $config;
		$this->session = $session;
		$this->username = $username;
	}

	/**
	* Sets the basic client configuration
	*
	* @param Config $config Basic client configuration
	*
	* @return void
	*/
	public function setConfig(Config &$config) {
		$this->config = $config;
	}

	/**
	* Returns the current basic client configuration
	*
	* @return Config
	*/
	public function getConfig() {
		return $this->config;
	}

	/**
	* Sets session token
	*
	* @param string $value Token value
	*
	* @return void
	*/
	public function setSession($value) {
		$this->session = $value;
	}

	/**
	* Returns the session token
	*
	* @return string|null
	*/
	public function getSession() {
		return $this->session;
	}

	/**
	* Sets the username identification
	*
	* @param string $value Username identification
	*
	* @return void
	*/
	public function setUsername($value) {
		$this->username = $value;
	}

	/**
	* Returns the username identification
	*
	* @return string
	*/
	public function getUsername() {
		return $this->username;
	}

	/**
	* Returns a wiget endpoint full URL
	*
	* @param string $resource Resource URI
	* @param string|array $query Resource query string
	*
	* @return string
	*
	* @throws Exception\EmptyWidgetUsername
	* @throws Exception\EmptyWidgetSession
	*/
	public function getEndpoint($resource, $query = null) {
		if (empty($this->username))
			throw new Exception\EmptyWidgetUsername;
		if (empty($this->session))
			throw new Exception\EmptyWidgetSession;
		if (empty($query))
			$query = "session={$this->session}";
		else if (is_array($query))
			$query['session'] = $this->session;
		else
			$query .= "&session={$this->session}";
		return URL::build(self::BASE_URL, array($this->config->getVersion(), $resource, $this->config->getClient(), $this->username), $query);
	}

}
